{
    "project": {
        "name": "ember-solr",
        "description": "Solr adapter for Ember Data",
        "external": {
            "data": [
                {
                    "base": "http://emberjs.com/api/",
                    "json": "http://builds.emberjs.com/tags/v1.10.0/ember-docs.json"
                },
                {
                    "base": "http://emberjs.com/api/data/",
                    "json": "http://builds.emberjs.com/tags/v1.0.0-beta.6/ember-data-docs.json"
                }
            ]
        },
        "version": "0.0.0.dad61b69"
    },
    "files": {
        "addon/adapters/solr.js": {
            "name": "addon/adapters/solr.js",
            "modules": {
                "solr": 1
            },
            "classes": {
                "SolrAdapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/requests/handlers.js": {
            "name": "addon/requests/handlers.js",
            "modules": {},
            "classes": {
                "SolrHandlerType": 1,
                "SolrRequestHandler": 1,
                "SolrSearchHandler": 1,
                "SolrRealTimeGetHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/requests/request.js": {
            "name": "addon/requests/request.js",
            "modules": {},
            "classes": {
                "SolrRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/serializers/solr-dynamic.js": {
            "name": "addon/serializers/solr-dynamic.js",
            "modules": {},
            "classes": {
                "SolrDynamicSerializer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/serializers/solr.js": {
            "name": "addon/serializers/solr.js",
            "modules": {},
            "classes": {
                "SolrSerializer": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "solr": {
            "name": "solr",
            "submodules": {},
            "classes": {
                "SolrAdapter": 1,
                "SolrHandlerType": 1,
                "SolrRequestHandler": 1,
                "SolrSearchHandler": 1,
                "SolrRealTimeGetHandler": 1,
                "SolrRequest": 1,
                "SolrDynamicSerializer": 1,
                "SolrSerializer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/serializers/solr.js",
            "line": 7
        }
    },
    "classes": {
        "SolrAdapter": {
            "name": "SolrAdapter",
            "shortname": "SolrAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/adapters/solr.js",
            "line": 17,
            "description": "Ember Data Adapter for Apache Solr.",
            "extends": "DS.Adapter"
        },
        "SolrHandlerType": {
            "name": "SolrHandlerType",
            "shortname": "SolrHandlerType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/requests/handlers.js",
            "line": 7,
            "description": "An enumeration of handler types that `ember-solr`\nknows how to interact with.",
            "static": 1
        },
        "SolrRequestHandler": {
            "name": "SolrRequestHandler",
            "shortname": "SolrRequestHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/requests/handlers.js",
            "line": 48,
            "description": "An abstract representation of a Solr request\nhandler, including its type, path and HTTP method."
        },
        "SolrSearchHandler": {
            "name": "SolrSearchHandler",
            "shortname": "SolrSearchHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/requests/handlers.js",
            "line": 82,
            "description": "Represents a default configuration of a request\nto a Solr search handler.",
            "extends": "SolrRequestHandler"
        },
        "SolrRealTimeGetHandler": {
            "name": "SolrRealTimeGetHandler",
            "shortname": "SolrRealTimeGetHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/requests/handlers.js",
            "line": 103,
            "description": "Represents a default configuration of a request\nto a Solr Real Time Get handler."
        },
        "SolrRequest": {
            "name": "SolrRequest",
            "shortname": "SolrRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/requests/request.js",
            "line": 7,
            "description": "Represents an HTTP Request to a Solr server,\nincluding URL path segments, data and options\nthat control how the request will be executed.\n\nAllows easy setting of data parameters (serialized\nas a query string for `GET` requests or a JSON string\nfor other types).\n\nConstruction of this class should either provide\nthe `data` property or the `options` property,\nbut not both.",
            "extends": "Ember.Object"
        },
        "SolrDynamicSerializer": {
            "name": "SolrDynamicSerializer",
            "shortname": "SolrDynamicSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/serializers/solr-dynamic.js",
            "line": 4,
            "description": "Ember Data Serializer for Apache Solr [Dynamic Fields](https://cwiki.apache.org/confluence/display/solr/Dynamic+Fields).",
            "extends": "SolrSerializer"
        },
        "SolrSerializer": {
            "name": "SolrSerializer",
            "shortname": "SolrSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "solr",
            "namespace": "",
            "file": "addon/serializers/solr.js",
            "line": 7,
            "description": "Ember Data Serializer for Apache Solr.",
            "extends": "DS.JSONSerializer"
        }
    },
    "classitems": [
        {
            "file": "addon/adapters/solr.js",
            "line": 23,
            "description": "The base URL where the Solr instance is hosted.\nThis property is typically configured by setting\n`ENV.solrBaseURL` in your `config/environment.js`\nfile.",
            "itemtype": "property",
            "name": "baseURL",
            "type": "{string}",
            "default": "'/solr'",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 34,
            "description": "Specifies a default Solr Core to send requests\nto. If no default core is configured, this adapter\nwill not include a core in the request URI path\nand the Solr server will use its own default.",
            "itemtype": "property",
            "name": "defaultCore",
            "type": "{string}",
            "default": "null",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 45,
            "description": "Sets the default serializer for this adapter.\nUses {{#crossLink \"SolrSerializer\"}}{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "defaultSerializer",
            "type": "{string}",
            "default": "'-solr'",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 54,
            "description": "Sets the data type for jQuery ajax requests.\nEither `json` or `jsonp` are supported.\n`jsonp` is provided as the default to allow cross-origin\nrequests to succeed without needing special customization\nof the Solr server.",
            "itemtype": "property",
            "name": "dataType",
            "type": "{string}",
            "default": "'jsonp'",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 66,
            "description": "Enables or disables sending requests to Solr's\nReal Time Get handler. Note that this handler is\ndisabled by default on many Solr servers.\n\nReal Time Get allows retrieval of documents that\nhave not yet been committed by retrieving them from\nthe update log.\n\nIf you are using SolrCloud, it is generally safe to\nenable this feature.",
            "itemtype": "property",
            "name": "enableRealTimeGet",
            "type": "{boolean}",
            "default": "false",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 84,
            "description": "Find a record by its unique ID.",
            "itemtype": "method",
            "name": "find",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 95,
            "description": "Find all documents of a type.",
            "itemtype": "method",
            "name": "findAll",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 107,
            "description": "Find multiple documents in a single request.",
            "itemtype": "method",
            "name": "findMany",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 118,
            "description": "Find one or more records by arbitrary query\n\nThe query hash should include the key `q` with\nan appropriate Solr query to execute. If this key\nis not specified, `*:*` will be used to match all\ndocuments.\n\nThe query hash may include the keys `limit` and/or\n`offset` to override the Solr request handler's\npage size and retrieve rows from a given offset.",
            "itemtype": "method",
            "name": "findQuery",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 156,
            "description": "Builds a request to send to Solr.",
            "itemtype": "method",
            "name": "buildRequest",
            "params": [
                {
                    "name": "type",
                    "description": "the model type",
                    "type": "String"
                },
                {
                    "name": "operation",
                    "description": "one of `find`, `findQuery`, etc.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "to be sent in the request",
                    "type": "Data"
                }
            ],
            "return": {
                "description": "request",
                "type": "SolrRequest"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 201,
            "description": "Builds a Solr query to send in a search request.\nThis method applies some defaults and converts\nidiomatic Ember query parameters to their\nSolr corollaries.\n\n* Sets `wt=json`\n* Converts `limit` to `rows`\n* Converts `offset` to `start`\n* Defaults to `q=*:*` when no query is specified\n* Calls {{#crossLink \"SolrAdapter/filterQueryForType:method\"}}{{/crossLink}}\nand sets `fq` when a non-blank filter query is returned\n\nOverrides of this method can return an object that includes\nother query options. Multipe `fq` parameters (and others)\ncan be defined by using an array for the values:\n```javascript\nApp.ApplicationAdapter = SolrAdapter.extend({\n  buildSolrQuery: function(type, query) {\n    return {\n      fq: [\n        'type:' + type,\n        'public:true'\n      ]\n    };\n  }\n});\n```\n\nSee [QueryResponseWriter](https://wiki.apache.org/solr/QueryResponseWriter)\nand [CommonQueryParameters](https://wiki.apache.org/solr/CommonQueryParameters).",
            "itemtype": "method",
            "name": "buildSolrQuery",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data hash for ajax request",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 263,
            "description": "Determines which Solr Core should handle queries for\na given type and oepration. By default,\n{{#crossLink \"SolrAdapter/defaultCore:property\"}}{{/crossLink}}\nis used.",
            "itemtype": "method",
            "name": "coreForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "core name",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 278,
            "description": "Determines the [unique key](https://wiki.apache.org/solr/UniqueKey)\nfor a given type. Default Solr schemas use the canonical field `id`\nand this method defaults to the same field.",
            "itemtype": "method",
            "name": "uniqueKeyForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 291,
            "description": "Determines which Solr Core should handle queries for\na given type and operation.\n\nWhen\n{{#crossLink \"SolrAdapter/enableRealTimeGet:property\"}}{{/crossLink}}\nis set to `true`, this method will choose RealTimeGet\nfor `find` and `findMany` operations.\n\nOverride this method to customize the path and type\nof handler that should be used for given operations.",
            "itemtype": "method",
            "name": "handlerForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "handler instance",
                "type": "SolrRequestHandler"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 320,
            "description": "Builds an optional filter query (`fq`) to include in search requests.\nIf multiple models are stored in the same Solr Core, applying\nan appropriate filter query will ensure only the documents of\nthe appropriate type are included.\nExample\n```javascript\nApp.ApplicationAdapter = SolrAdapter.extend({\n  filterQueryForType: function(type) {\n    return 'doc_type:' + type;\n  }\n});\n```\nSee [CommonQueryParameters](https://wiki.apache.org/solr/CommonQueryParameters#fq).",
            "itemtype": "method",
            "name": "filterQueryForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a filter query or `null`",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 341,
            "description": "Builds a complete URL and initiates\nan AJAX request to Solr.",
            "itemtype": "method",
            "name": "executeRequest",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "SolrRequest"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "protcted": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 359,
            "description": "Joins two or more strings into a path delimited\nby forward slashes without adding redundant slashes.\nAny number of arguments can be passed into this method.",
            "itemtype": "method",
            "name": "combinePath",
            "params": [
                {
                    "name": "path1",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path2",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 390,
            "description": "Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.\nWhen the server responds with a payload, Ember Data will call into `extractSingle`\nor `extractArray` (depending on whether the original query was for one record or\nmany records).\nBy default, `ajax` method has the following behavior:\n* It sets the response `dataType` to `\"json\"`\n* If the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n  `application/json; charset=utf-8`\n* If the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\n  data is the serialized record in the case of a save.\n* Registers success and failure handlers.",
            "itemtype": "method",
            "name": "ajax",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 434,
            "itemtype": "method",
            "name": "ajaxOptions",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 472,
            "description": "Takes an ajax response, and returns the json payload.\nBy default this hook just returns the jsonPayload passed to it.\nYou might want to override it in two cases:\n1. Your API might return useful results in the request headers.\nIf you need to access these, you can override this hook to copy them\nfrom jqXHR to the payload object so they can be processed in you serializer.\n2. Your API might return errors as successful responses with status code\n200 and an Errors text or object. You can return a DS.InvalidError from\nthis hook and it will automatically reject the promise and put your record\ninto the invalid state.",
            "itemtype": "method",
            "name": "ajaxSuccess",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "jsonPayload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jsonPayload",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/adapters/solr.js",
            "line": 493,
            "description": "Takes an ajax response, and returns an error payload.\nReturning a `DS.InvalidError` from this method will cause the\nrecord to transition into the `invalid` state and make the\n`errors` object available on the record.\nThis function should return the entire payload as received from the\nserver.  Error object extraction and normalization of model errors\nshould be performed by `extractErrors` on the serializer.\nExample\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  ajaxError: function(jqXHR) {\n    var error = this._super(jqXHR);\n    if (jqXHR && jqXHR.status === 422) {\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText);\n      return new DS.InvalidError(jsonErrors);\n    } else {\n      return error;\n    }\n  }\n});\n```\nNote: As a correctness optimization, the default implementation of\nthe `ajaxError` method strips out the `then` method from jquery's\najax response (jqXHR). This is important because the jqXHR's\n`then` method fulfills the promise with itself resulting in a\ncircular \"thenable\" chain which may cause problems for some\npromise libraries.",
            "itemtype": "method",
            "name": "ajaxError",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "responseText",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jqXHR",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "SolrAdapter",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 15,
            "description": "Represents a requst to `select`, `search` and\nother standard request handlers.\n\nThis is the handler type that will be used in\n`findQuery`, and when real-time get is not enabled\nit will also be used in all `find*` operations.\n\nSee [SearchHandler](http://wiki.apache.org/solr/SearchHandler).",
            "itemtype": "property",
            "name": "Search",
            "final": 1,
            "type": "{string}",
            "class": "SolrHandlerType",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 31,
            "description": "Represents a requst to `get` and\nother real time get handlers.\n\nThis is the handler type that will be used when\n{{#crossLink \"SolrAdapter/enableRealTimeGet:property\"}}{{/crossLink}}\nis set to `true` for `find`, and `findMany`.\n\nSee [RealTimeGet](http://wiki.apache.org/solr/RealTimeGet).",
            "itemtype": "property",
            "name": "RealTimeGet",
            "final": 1,
            "type": "{string}",
            "class": "SolrHandlerType",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 54,
            "description": "The type of request.",
            "itemtype": "property",
            "name": "type",
            "type": "{SolrHandlerType}",
            "class": "SolrRequestHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 62,
            "description": "The path to route the request to. Typical\nexamples include handler paths like `/search`,\n`/select`, `/get`, and `/update`.",
            "itemtype": "property",
            "name": "path",
            "type": "{string}",
            "class": "SolrRequestHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 72,
            "description": "The HTTP method (verb) to use in the request.",
            "itemtype": "property",
            "name": "method",
            "type": "{string}",
            "default": "'GET'",
            "class": "SolrRequestHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 90,
            "itemtype": "property",
            "name": "type",
            "default": "`SolrHandlerType.Search`",
            "class": "SolrSearchHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 96,
            "itemtype": "property",
            "name": "path",
            "default": "'select'",
            "class": "SolrSearchHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 110,
            "itemtype": "property",
            "name": "type",
            "default": "`SolrHandlerType.RealTimeGet`",
            "class": "SolrRealTimeGetHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/handlers.js",
            "line": 116,
            "itemtype": "property",
            "name": "path",
            "default": "'get'",
            "class": "SolrRealTimeGetHandler",
            "module": "solr"
        },
        {
            "file": "addon/requests/request.js",
            "line": 24,
            "description": "The Solr Core to route the request to.\nWhen not specified, no core will be included\nin the path and the request will be routed\nto the default core on the server.",
            "itemtype": "property",
            "name": "core",
            "type": "{string}",
            "class": "SolrRequest",
            "module": "solr"
        },
        {
            "file": "addon/requests/request.js",
            "line": 35,
            "description": "The handler to route the request to.",
            "itemtype": "property",
            "name": "handler",
            "type": "{SolrRequestHandler}",
            "class": "SolrRequest",
            "module": "solr"
        },
        {
            "file": "addon/requests/request.js",
            "line": 43,
            "description": "Data to send in the request.\nThis property is bound to `options.data`.",
            "itemtype": "property",
            "name": "data",
            "type": "{object}",
            "class": "SolrRequest",
            "module": "solr"
        },
        {
            "file": "addon/requests/request.js",
            "line": 52,
            "description": "Options hash that specifies how the request\nwill be executed.\n`options.data` is bound to `data`.",
            "itemtype": "property",
            "name": "options",
            "type": "{object}",
            "class": "SolrRequest",
            "module": "solr"
        },
        {
            "file": "addon/requests/request.js",
            "line": 62,
            "description": "Binds `handler.method` to `method` for convenience.\nRepresents an HTTP method or verb, e.g. `GET`, `POST`,\netc.",
            "itemtype": "property",
            "name": "method",
            "type": "{string}",
            "readonly": "",
            "class": "SolrRequest",
            "module": "solr"
        },
        {
            "file": "addon/requests/request.js",
            "line": 73,
            "description": "Initialization observer. Checks whether `options`,\nor `data` were provided, creates empty hash objects\nwhere they were not, and establishes a binding\nbetween `options.data` and `data`.",
            "itemtype": "method",
            "name": "_init",
            "access": "private",
            "tagname": "",
            "class": "SolrRequest",
            "module": "solr"
        },
        {
            "file": "addon/serializers/solr-dynamic.js",
            "line": 12,
            "description": "Provides a mapping of types to dynamic field prefixes.\n\nThe following example would cause all attributes of type `number`\nto be mapped by prepending `int_` to the attribute name:\n\n```javascript\nApp.ApplicationSerializer = SolrDynamicSerializer.extend({\n  dynamicFieldPrefixes: {\n    'number': 'int_'\n  }\n});\n```\n\nThis property is left null to follow the conventions in the\nSolr Schemaless example configuration.",
            "itemtype": "property",
            "name": "dynamicFieldPrefixes",
            "type": "{object}",
            "default": "null",
            "class": "SolrDynamicSerializer",
            "module": "solr"
        },
        {
            "file": "addon/serializers/solr-dynamic.js",
            "line": 35,
            "description": "Provides a mapping of types to dynamic field prefixes.\n\nThe following example would cause all attributes of type `date`\nto be mapped by appending `_date` to the attribute name:\n\n```javascript\nApp.ApplicationSerializer = SolrdynamicSerializer.extend({\n  dynamicFieldSuffixes: {\n    'date': '_date'\n  }\n});\n```\n\nSee source code for default mappings that follow\nconventions in the Solr Dynamic example configuration.",
            "itemtype": "property",
            "name": "dynamicFieldSuffixes",
            "type": "{object}",
            "default": "null",
            "class": "SolrDynamicSerializer",
            "module": "solr"
        },
        {
            "file": "addon/serializers/solr-dynamic.js",
            "line": 76,
            "description": "Converts attributes to underscore and uses\n{{#crossLink \"SolrAdapter/dynamicKeyForAttribute:method\"}}{{/crossLink}}.\nto produce a dynamic field key. For a string attribute like `relatedArticles`\nthis method would return `related_articles_s`.",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "key",
                "type": "String"
            },
            "class": "SolrDynamicSerializer",
            "module": "solr"
        },
        {
            "file": "addon/serializers/solr-dynamic.js",
            "line": 91,
            "description": "Uses\n{{#crossLink \"SolrAdapter/dynamicFieldPrefixes:property\"}}{{/crossLink}}\nand\n{{#crossLink \"SolrAdapter/dynamicFieldSuffixes:property\"}}{{/crossLink}}\nto produce a dynamic field key. For a string attribute like `related_articles`\nthis method would return `related_articles_s`.",
            "itemtype": "method",
            "name": "dynamicKeyForAttribute",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "key",
                "type": "String"
            },
            "class": "SolrDynamicSerializer",
            "module": "solr"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: protcted",
            "line": " addon/adapters/solr.js:341"
        }
    ]
}